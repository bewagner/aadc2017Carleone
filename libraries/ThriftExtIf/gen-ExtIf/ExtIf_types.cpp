/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ExtIf_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ext_iface {

	int _kTransportDefValues[] = {
		TransportDef::IMAGEDATA
	};
	const char* _kTransportDefNames[] = {
		"IMAGEDATA"
	};
	const std::map<int, const char*> _TransportDef_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTransportDefValues, _kTransportDefNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


	TDataRaw::~TDataRaw() throw() {
	}


	void TDataRaw::__set_raw_data(const std::string& val) {
		this->raw_data = val;
	}

	uint32_t TDataRaw::read(::apache::thrift::protocol::TProtocol* iprot) {

		apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
		uint32_t xfer = 0;
		std::string fname;
		::apache::thrift::protocol::TType ftype;
		int16_t fid;

		xfer += iprot->readStructBegin(fname);

		using ::apache::thrift::protocol::TProtocolException;

		bool isset_raw_data = false;

		while (true)
		{
			xfer += iprot->readFieldBegin(fname, ftype, fid);
			if (ftype == ::apache::thrift::protocol::T_STOP) {
				break;
			}
			switch (fid)
			{
			case 1:
				if (ftype == ::apache::thrift::protocol::T_STRING) {
					xfer += iprot->readBinary(this->raw_data);
					isset_raw_data = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			default:
				xfer += iprot->skip(ftype);
				break;
			}
			xfer += iprot->readFieldEnd();
		}

		xfer += iprot->readStructEnd();

		if (!isset_raw_data)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		return xfer;
	}

	uint32_t TDataRaw::write(::apache::thrift::protocol::TProtocol* oprot) const {
		uint32_t xfer = 0;
		apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
		xfer += oprot->writeStructBegin("TDataRaw");

		xfer += oprot->writeFieldBegin("raw_data", ::apache::thrift::protocol::T_STRING, 1);
		xfer += oprot->writeBinary(this->raw_data);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldStop();
		xfer += oprot->writeStructEnd();
		return xfer;
	}

	void swap(TDataRaw &a, TDataRaw &b) {
		using ::std::swap;
		swap(a.raw_data, b.raw_data);
	}

	TDataRaw::TDataRaw(const TDataRaw& other0) {
		raw_data = other0.raw_data;
	}
	TDataRaw& TDataRaw::operator=(const TDataRaw& other1) {
		raw_data = other1.raw_data;
		return *this;
	}
	void TDataRaw::printTo(std::ostream& out) const {
		using ::apache::thrift::to_string;
		out << "TDataRaw(";
		out << "raw_data=" << to_string(raw_data);
		out << ")";
	}


	TDataResult::~TDataResult() throw() {
	}


	void TDataResult::__set_classification(const std::string& val) {
		this->classification = val;
	}
	
	void TDataResult::__set_orientation(const std::string& val) {
		this->orientation = val;
	}

	void TDataResult::__set_probability(const double val) {
		this->probability = val;
	}

	void TDataResult::__set_ymin(const double val) {
		this->ymin = val;
	}
	void TDataResult::__set_xmin(const double val) {
		this->xmin = val;
	}
	void TDataResult::__set_ymax(const double val) {
		this->ymax = val;
	}
	void TDataResult::__set_xmax(const double val) {
		this->xmax = val;
	}
	
	void TDataResult::__set_kid(const bool val) {
		this->kid = val;
	}





	uint32_t TDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

		apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
		uint32_t xfer = 0;
		std::string fname;
		::apache::thrift::protocol::TType ftype;
		int16_t fid;

		xfer += iprot->readStructBegin(fname);

		using ::apache::thrift::protocol::TProtocolException;

		bool isset_classification = false;
		bool isset_orientation = false;
		bool isset_probability = false;
		bool isset_kid = false;
		bool isset_ymin = false;
		bool isset_xmin = false;
		bool isset_ymax = false;
		bool isset_xmax = false;


		while (true)
		{
			xfer += iprot->readFieldBegin(fname, ftype, fid);
			if (ftype == ::apache::thrift::protocol::T_STOP) {
				break;
			}
			switch (fid)
			{
			case 1:
				if (ftype == ::apache::thrift::protocol::T_STRING) {
					xfer += iprot->readString(this->classification);
					isset_classification = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 2:
				if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
					xfer += iprot->readDouble(this->probability);
					isset_probability = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 3:
				if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
					xfer += iprot->readDouble(this->ymin);
					isset_ymin = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 4:
				if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
					xfer += iprot->readDouble(this->xmin);
					isset_xmin = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 5:
				if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
					xfer += iprot->readDouble(this->ymax);
					isset_ymax = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 6:
				if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
					xfer += iprot->readDouble(this->xmax);
					isset_xmax = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 7:
				if (ftype == ::apache::thrift::protocol::T_STRING) {
					xfer += iprot->readString(this->orientation);
					isset_orientation = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;

			case 8:
				if (ftype == ::apache::thrift::protocol::T_BOOL) {
					xfer += iprot->readBool(this->kid);
					isset_kid = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			   
			default:
				xfer += iprot->skip(ftype);
				break;
			}
			xfer += iprot->readFieldEnd();
		}

		xfer += iprot->readStructEnd();

		if (!isset_classification)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_orientation)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_probability)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_kid)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_ymin)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_xmin)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_ymax)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_xmax)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		return xfer;
	}

	uint32_t TDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
		uint32_t xfer = 0;
		apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
		xfer += oprot->writeStructBegin("TDataResult");

		xfer += oprot->writeFieldBegin("classification", ::apache::thrift::protocol::T_STRING, 1);
		xfer += oprot->writeString(this->classification);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("probability", ::apache::thrift::protocol::T_DOUBLE, 2);
		xfer += oprot->writeDouble(this->probability);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("ymin", ::apache::thrift::protocol::T_DOUBLE, 3);
		xfer += oprot->writeDouble(this->ymin);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("xmin", ::apache::thrift::protocol::T_DOUBLE, 4);
		xfer += oprot->writeDouble(this->xmin);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("ymax", ::apache::thrift::protocol::T_DOUBLE, 5);
		xfer += oprot->writeDouble(this->ymax);
		xfer += oprot->writeFieldEnd();
		
		xfer += oprot->writeFieldBegin("xmax", ::apache::thrift::protocol::T_DOUBLE, 6);
		xfer += oprot->writeDouble(this->xmax);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("orientation", ::apache::thrift::protocol::T_STRING, 7);
		xfer += oprot->writeString(this->orientation);
		xfer += oprot->writeFieldEnd();
		
		xfer += oprot->writeFieldBegin("kid", ::apache::thrift::protocol::T_BOOL, 8);
		xfer += oprot->writeBool(this->kid);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldStop();
		xfer += oprot->writeStructEnd();
		return xfer;
	}

	void swap(TDataResult &a, TDataResult &b) {
		using ::std::swap;
		swap(a.classification, b.classification);
		swap(a.orientation, b.orientation);
		swap(a.probability, b.probability);
		swap(a.kid, b.kid);
		swap(a.ymin, b.ymin);
		swap(a.xmin, b.xmin);
		swap(a.ymax, b.ymax);
		swap(a.xmax, b.xmax);

	}

	TDataResult::TDataResult(const TDataResult& other2) {
		classification = other2.classification;
		orientation = other2.orientation;
		probability = other2.probability;
		kid = other2.kid;
		ymin = other2.ymin;
		xmin = other2.xmin;
		ymax = other2.ymax;
		xmax = other2.xmax;

	}
	TDataResult& TDataResult::operator=(const TDataResult& other3) {
		classification = other3.classification;
		orientation = other3.orientation;
		probability = other3.probability;
		kid = other3.kid;
		ymin = other3.ymin;
		xmin = other3.xmin;
		ymax = other3.ymax;
		xmax = other3.xmax;
		return *this;
	}
	void TDataResult::printTo(std::ostream& out) const {
		using ::apache::thrift::to_string;
		out << "TDataResult(";
		out << "classification=" << to_string(classification);
		out << ", " << "probability=" << to_string(probability);
		out << ", " << "kid=" << to_string(kid);
		out << ", " << "ymin=" << to_string(ymin);
		out << ", " << "xmin=" << to_string(xmin);
		out << ", " << "ymax=" << to_string(ymax);
		out << ", " << "xmax=" << to_string(xmax);
		out << ", " << "orientation=" << to_string(orientation);
		out << ")";
	}


	TImageParams::~TImageParams() throw() {
	}


	void TImageParams::__set_height(const int16_t val) {
		this->height = val;
	}

	void TImageParams::__set_width(const int16_t val) {
		this->width = val;
	}

	void TImageParams::__set_bytesPerPixel(const int16_t val) {
		this->bytesPerPixel = val;
	}

	uint32_t TImageParams::read(::apache::thrift::protocol::TProtocol* iprot) {

		apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
		uint32_t xfer = 0;
		std::string fname;
		::apache::thrift::protocol::TType ftype;
		int16_t fid;

		xfer += iprot->readStructBegin(fname);

		using ::apache::thrift::protocol::TProtocolException;

		bool isset_height = false;
		bool isset_width = false;
		bool isset_bytesPerPixel = false;

		while (true)
		{
			xfer += iprot->readFieldBegin(fname, ftype, fid);
			if (ftype == ::apache::thrift::protocol::T_STOP) {
				break;
			}
			switch (fid)
			{
			case 1:
				if (ftype == ::apache::thrift::protocol::T_I16) {
					xfer += iprot->readI16(this->height);
					isset_height = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 2:
				if (ftype == ::apache::thrift::protocol::T_I16) {
					xfer += iprot->readI16(this->width);
					isset_width = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			case 3:
				if (ftype == ::apache::thrift::protocol::T_I16) {
					xfer += iprot->readI16(this->bytesPerPixel);
					isset_bytesPerPixel = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			default:
				xfer += iprot->skip(ftype);
				break;
			}
			xfer += iprot->readFieldEnd();
		}

		xfer += iprot->readStructEnd();

		if (!isset_height)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_width)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		if (!isset_bytesPerPixel)
			throw TProtocolException(TProtocolException::INVALID_DATA);
		return xfer;
	}

	uint32_t TImageParams::write(::apache::thrift::protocol::TProtocol* oprot) const {
		uint32_t xfer = 0;
		apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
		xfer += oprot->writeStructBegin("TImageParams");

		xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I16, 1);
		xfer += oprot->writeI16(this->height);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I16, 2);
		xfer += oprot->writeI16(this->width);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldBegin("bytesPerPixel", ::apache::thrift::protocol::T_I16, 3);
		xfer += oprot->writeI16(this->bytesPerPixel);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldStop();
		xfer += oprot->writeStructEnd();
		return xfer;
	}

	void swap(TImageParams &a, TImageParams &b) {
		using ::std::swap;
		swap(a.height, b.height);
		swap(a.width, b.width);
		swap(a.bytesPerPixel, b.bytesPerPixel);
	}

	TImageParams::TImageParams(const TImageParams& other4) {
		height = other4.height;
		width = other4.width;
		bytesPerPixel = other4.bytesPerPixel;
	}
	TImageParams& TImageParams::operator=(const TImageParams& other5) {
		height = other5.height;
		width = other5.width;
		bytesPerPixel = other5.bytesPerPixel;
		return *this;
	}
	void TImageParams::printTo(std::ostream& out) const {
		using ::apache::thrift::to_string;
		out << "TImageParams(";
		out << "height=" << to_string(height);
		out << ", " << "width=" << to_string(width);
		out << ", " << "bytesPerPixel=" << to_string(bytesPerPixel);
		out << ")";
	}


	TIoException::~TIoException() throw() {
	}


	void TIoException::__set_message(const std::string& val) {
		this->message = val;
	}

	uint32_t TIoException::read(::apache::thrift::protocol::TProtocol* iprot) {

		apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
		uint32_t xfer = 0;
		std::string fname;
		::apache::thrift::protocol::TType ftype;
		int16_t fid;

		xfer += iprot->readStructBegin(fname);

		using ::apache::thrift::protocol::TProtocolException;


		while (true)
		{
			xfer += iprot->readFieldBegin(fname, ftype, fid);
			if (ftype == ::apache::thrift::protocol::T_STOP) {
				break;
			}
			switch (fid)
			{
			case 1:
				if (ftype == ::apache::thrift::protocol::T_STRING) {
					xfer += iprot->readString(this->message);
					this->__isset.message = true;
				} else {
					xfer += iprot->skip(ftype);
				}
				break;
			default:
				xfer += iprot->skip(ftype);
				break;
			}
			xfer += iprot->readFieldEnd();
		}

		xfer += iprot->readStructEnd();

		return xfer;
	}

	uint32_t TIoException::write(::apache::thrift::protocol::TProtocol* oprot) const {
		uint32_t xfer = 0;
		apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
		xfer += oprot->writeStructBegin("TIoException");

		xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
		xfer += oprot->writeString(this->message);
		xfer += oprot->writeFieldEnd();

		xfer += oprot->writeFieldStop();
		xfer += oprot->writeStructEnd();
		return xfer;
	}

	void swap(TIoException &a, TIoException &b) {
		using ::std::swap;
		swap(a.message, b.message);
		swap(a.__isset, b.__isset);
	}

	TIoException::TIoException(const TIoException& other6) : TException() {
		message = other6.message;
		__isset = other6.__isset;
	}
	TIoException& TIoException::operator=(const TIoException& other7) {
		message = other7.message;
		__isset = other7.__isset;
		return *this;
	}
	void TIoException::printTo(std::ostream& out) const {
		using ::apache::thrift::to_string;
		out << "TIoException(";
		out << "message=" << to_string(message);
		out << ")";
	}

	const char* TIoException::what() const throw() {
		try {
			std::stringstream ss;
			ss << "TException - service has thrown: " << *this;
			this->thriftTExceptionMessageHolder_ = ss.str();
			return this->thriftTExceptionMessageHolder_.c_str();
		} catch (const std::exception&) {
			return "TException - service has thrown: TIoException";
		}
	}

} // namespace

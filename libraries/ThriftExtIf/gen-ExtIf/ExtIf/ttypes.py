#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TransportDef:
  """
  ****************************************************************************
   interface objects
  ****************************************************************************
  """
  IMAGEDATA = 0

  _VALUES_TO_NAMES = {
    0: "IMAGEDATA",
  }

  _NAMES_TO_VALUES = {
    "IMAGEDATA": 0,
  }


class TDataRaw:
  """
  Attributes:
   - raw_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'raw_data', None, None, ), # 1
  )

  def __init__(self, raw_data=None,):
    self.raw_data = raw_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.raw_data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDataRaw')
    if self.raw_data is not None:
      oprot.writeFieldBegin('raw_data', TType.STRING, 1)
      oprot.writeString(self.raw_data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.raw_data is None:
      raise TProtocol.TProtocolException(message='Required field raw_data is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TDataResult:
  """
  Attributes:
   - classification
   - probability
   - ymin
   - xmin
   - ymax
   - xmax
   - orientation
   - kid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'classification', None, None, ), # 1
    (2, TType.DOUBLE, 'probability', None, None, ), # 2
    (3, TType.DOUBLE, 'ymin', None, None, ), # 3
    (4, TType.DOUBLE, 'xmin', None, None, ), # 4
    (5, TType.DOUBLE, 'ymax', None, None, ), # 5
    (6, TType.DOUBLE, 'xmax', None, None, ), # 6
    (7, TType.STRING, 'orientation', None, None, ), # 7
    (8, TType.BOOL, 'kid', None, None, ), # 8
  )

  def __init__(self, classification=None, probability=None, ymin=None, xmin=None, ymax=None, xmax=None, orientation=None, kid=None,):
    self.classification = classification
    self.probability = probability
    self.ymin = ymin
    self.xmin = xmin
    self.ymax = ymax
    self.xmax = xmax
    self.orientation = orientation
    self.kid = kid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.classification = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.probability = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.ymin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.xmin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.ymax = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.xmax = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.orientation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.kid = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDataResult')
    if self.classification is not None:
      oprot.writeFieldBegin('classification', TType.STRING, 1)
      oprot.writeString(self.classification)
      oprot.writeFieldEnd()
    if self.probability is not None:
      oprot.writeFieldBegin('probability', TType.DOUBLE, 2)
      oprot.writeDouble(self.probability)
      oprot.writeFieldEnd()
    if self.ymin is not None:
      oprot.writeFieldBegin('ymin', TType.DOUBLE, 3)
      oprot.writeDouble(self.ymin)
      oprot.writeFieldEnd()
    if self.xmin is not None:
      oprot.writeFieldBegin('xmin', TType.DOUBLE, 4)
      oprot.writeDouble(self.xmin)
      oprot.writeFieldEnd()
    if self.ymax is not None:
      oprot.writeFieldBegin('ymax', TType.DOUBLE, 5)
      oprot.writeDouble(self.ymax)
      oprot.writeFieldEnd()
    if self.xmax is not None:
      oprot.writeFieldBegin('xmax', TType.DOUBLE, 6)
      oprot.writeDouble(self.xmax)
      oprot.writeFieldEnd()
    if self.orientation is not None:
      oprot.writeFieldBegin('orientation', TType.STRING, 7)
      oprot.writeString(self.orientation)
      oprot.writeFieldEnd()
    if self.kid is not None:
      oprot.writeFieldBegin('kid', TType.BOOL, 8)
      oprot.writeBool(self.kid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.classification is None:
      raise TProtocol.TProtocolException(message='Required field classification is unset!')
    if self.probability is None:
      raise TProtocol.TProtocolException(message='Required field probability is unset!')
    if self.ymin is None:
      raise TProtocol.TProtocolException(message='Required field ymin is unset!')
    if self.xmin is None:
      raise TProtocol.TProtocolException(message='Required field xmin is unset!')
    if self.ymax is None:
      raise TProtocol.TProtocolException(message='Required field ymax is unset!')
    if self.xmax is None:
      raise TProtocol.TProtocolException(message='Required field xmax is unset!')
    if self.orientation is None:
      raise TProtocol.TProtocolException(message='Required field orientation is unset!')
    if self.kid is None:
      raise TProtocol.TProtocolException(message='Required field kid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TImageParams:
  """
  Attributes:
   - height
   - width
   - bytesPerPixel
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'height', None, None, ), # 1
    (2, TType.I16, 'width', None, None, ), # 2
    (3, TType.I16, 'bytesPerPixel', None, None, ), # 3
  )

  def __init__(self, height=None, width=None, bytesPerPixel=None,):
    self.height = height
    self.width = width
    self.bytesPerPixel = bytesPerPixel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.height = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.width = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.bytesPerPixel = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TImageParams')
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I16, 1)
      oprot.writeI16(self.height)
      oprot.writeFieldEnd()
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I16, 2)
      oprot.writeI16(self.width)
      oprot.writeFieldEnd()
    if self.bytesPerPixel is not None:
      oprot.writeFieldBegin('bytesPerPixel', TType.I16, 3)
      oprot.writeI16(self.bytesPerPixel)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.height is None:
      raise TProtocol.TProtocolException(message='Required field height is unset!')
    if self.width is None:
      raise TProtocol.TProtocolException(message='Required field width is unset!')
    if self.bytesPerPixel is None:
      raise TProtocol.TProtocolException(message='Required field bytesPerPixel is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TIoException(TException):
  """
  thrown by services

  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TIoException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
